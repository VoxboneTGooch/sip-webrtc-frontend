extends layout



prepend head
  style.
    #status-message-list {
      background-color: rebeccapurple;
    }

  script(src=process.env.VOXBONE_JS_LIB_URL)

  script.
    console.log(window);
    //console.log(voxbone);
    var answerCall, hangCall, declineCall, answerCall2, hangCall2, declineCall2;

    function appendMessage(icon, message) {
        var elem = document.getElementById("status-message-list");

        if (!elem) return;

        elem.innerHTML += '<div class="call-info">\
                <span class="glyphicon glyphicon-' + icon + '"></span>\
                 ' + message + '\
              </div>';

        elem.scrollTop = elem.scrollHeight;
    }

    function setState(state, callee) {
    switch (state) {
        case 'waiting':
            appendMessage('time', 'waiting');
            break;
        case 'receiving':
            appendMessage('bell', 'Receiving call');
            //$scope.callMsg = "Incoming call from " + callee;
            break;
        case 'ongoing':
            //$scope.callMsg = "In call with " + callee;
            appendMessage('earphone', 'In Call');
            break;
    }

    }

    var v = function(){
        audio = new Audio('/audio/old.ogg');

        var vox1 = new Voxbone({
          sipUsername: 'proud-sound',
          sipURI: 'sip:proud-sound@sip-staging.2webr.tc'
        });

        var vox2 = new Voxbone({
          sipUsername: '7502',
          sipPassword: '1234',
          sipAuthUser: '7502',
          sipRegistrar: 'ast.voxboneworkshop.com',
          sipURI: 'sip:7502@sip-staging.2webr.tc'
        });

        console.log('after constructor');

        console.log(vox1);

        console.log(vox2)

        vox1.WebRTC.basicAuthInit('workshop_webrtcventures', 'Clic2178!');

        vox2.WebRTC.basicAuthInit('workshop_webrtcventures', 'Clic2178!');

        vox1.WebRTC.onCall = function (callee, cb) {
            console.log('Calling voxbone() num.1');
            console.log(this);
            setState('receiving', callee);
            audio.play();

            answerCall = function () {
                cb(true);
                setState('ongoing', callee);
                audio.pause();
                audio.currentTime = 0;
            };

            declineCall = function () {
                cb(false);
            };
        };

        vox2.WebRTC.onCall = function (callee, cb) {
            console.log('Calling voxbone() num.2');
            console.log(this);
            setState('receiving', callee);
            audio.play();

            answerCall = function () {
                cb(true);
                setState('ongoing', callee);
                audio.pause();
                audio.currentTime = 0;
            };

            declineCall = function () {
                cb(false);
            };
        };

        eventHandlersActions(vox1);
        eventHandlersActions(vox2);
    };

    v();

    function clearDevice(device) {
        var micDots = document.querySelectorAll('.img-container #' + device + ' div');
        Array.prototype.forEach.call(micDots, function (el, i) {
                el.classList.remove('active');
        });
    }

    function eventHandlersActions(voxbone) {
      voxbone.WebRTC.customEventHandler.ended = function (e) {
          appendMessage('phone-alt', 'Ended call');
          appendMessage('time', 'Waiting for incoming call');
          setState('waiting');
      };

      voxbone.WebRTC.customEventHandler.registered = function (e) {
          appendMessage('ok', 'Registered');
          appendMessage('time', 'Waiting for incoming call');
          setState('waiting');
      };

      voxbone.WebRTC.customEventHandler.remoteMediaVolume = function (e) {
          clearDevice('phone-earphone');
          if (e.remoteVolume > 0.01) setEapDot('1');
          if (e.remoteVolume > 0.10) setEapDot('2');
          if (e.remoteVolume > 0.20) setEapDot('3');
      };

      voxbone.WebRTC.customEventHandler.localMediaVolume = function (e) {
          clearDevice('phone-microphone');
          if (e.localVolume > 0.01) setMicDot('1');
          if (e.localVolume > 0.10) setMicDot('2');

          hangCall = function () {
              voxbone.WebRTC.hangup();
              console.log('waiting');
              if (e.localVolume > 0.20) setMicDot('3');
          };
      };
    }
    console.log(window);

block content
  .body
    .site-wrapper-inner.home-wrap
      .container
        .call-actions
          button.btn.btn-answer.call-button(onclick="answerCall()")
            span.glyphicon.glyphicon-ok
            | Answer
          button.btn.btn-decline.call-button(onclick="declineCall();")
            span.glyphicon.glyphicon-earphone
            | Decline
          button.btn.btn-hangup.call-button(onclick="hangCall()")
            span.glyphicon.glyphicon-earphone
            | Hang up

      .col-md-6
          h4 Call Status
          #status-message-list
